Named tuples in Python are a special type of tuple that come with named fields, making it easier to access elements by name rather than relying on index positions.

They are defined using the collections.namedtuple factory function from the collections module. Named tuples provide a convenient way to define simple classes
without the need for a full-fledged class definition.

Here's a simplified explanation of named tuples with examples:

Regular Tuple:

# Regular tuple
regular_tuple = (1, 2, 3)
print(regular_tuple[0])  # Access by index

In a regular tuple, you access elements using indices, which can be less readable and prone to errors, especially when dealing with tuples of larger sizes.

Named Tuple:

from collections import namedtuple

# Define a named tuple type named 'Point' with fields 'x' and 'y'
Point = namedtuple('Point', ['x', 'y'])

# Create an instance of the named tuple
point = Point(x=1, y=2)

# Access elements by name
print(point.x)  # Access by name

In the example above, we've defined a named tuple type Point with fields x and y. We then create an instance of the named tuple with specific values for each 
field. 

You can access the elements of the named tuple using the field names instead of indices.

Key Features of Named Tuples:

Named Fields: Fields have names, making code more readable and self-documenting.

Immutability: Like regular tuples, named tuples are immutable, meaning their values cannot be changed after creation.

Lightweight: Named tuples provide a more memory-efficient alternative to defining full classes when you only need simple data containers.

Use Cases:

Named tuples are useful in scenarios where you want more readability and self-documentation compared to regular tuples. For example, instead of having a tuple of

coordinates like (1, 2), you can use a named tuple like Point(x=1, y=2), which makes it clear what each element represents.

# Using named tuple for coordinates
point1 = Point(x=1, y=2)
point2 = Point(x=3, y=4)

# More readable than regular tuples
print(f"Point 1: x={point1.x}, y={point1.y}")
print(f"Point 2: x={point2.x}, y={point2.y}")

In summary, named tuples offer a convenient way to create data containers with named fields, improving code readability and reducing the likelihood of errors 
related to index-based access.


Named tuples and regular tuples in Python share many similarities, but the key difference lies in the way you access elements. Here are the main distinctions:

Access by Name:

Regular Tuple: You access elements using indices (positions).

regular_tuple = (1, 2, 3)
print(regular_tuple[0])  # Access by index

Named Tuple: Elements are accessed by name, making the code more readable.

from collections import namedtuple

Point = namedtuple('Point', ['x', 'y'])
point = Point(x=1, y=2)

print(point.x)  # Access by name

Readability and Self-Documentation:

Regular Tuple: Can be less readable, especially when dealing with larger tuples, as you need to remember the meaning of each position.

Named Tuple: Provides more self-documentation and clarity in code. Field names make it evident what each element represents.

Immutable Structure:

Both regular tuples and named tuples are immutable, meaning their values cannot be changed after creation. Once a tuple is created, you cannot modify its elements.
Memory Efficiency:

Named tuples are slightly less memory-efficient than regular tuples due to the additional overhead of storing field names. However, this difference is often negligible 
unless you are dealing with very large datasets.

Defining Structure:

Regular Tuple: Defined using parentheses and comma-separated values.

regular_tuple = (1, 2, 3)

Named Tuple: Defined using the namedtuple factory function, specifying the type name and a list of field names.

from collections import namedtuple
Point = namedtuple('Point', ['x', 'y'])
point = Point(x=1, y=2)

Use Cases:

Regular Tuple: Suitable for general-purpose collection of ordered elements where the order is significant.

Named Tuple: Preferred when the elements have a clear meaning, and you want more readable and self-documenting code. Especially useful for creating lightweight 
data containers.

In summary, named tuples enhance code readability and maintainability by allowing you to access elements using meaningful names instead of indices. They are a 
good choice when you need a simple data structure with named fields and want to avoid the verbosity of defining a full class.
