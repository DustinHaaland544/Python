How to Write Python Scripts to Analyze JSON APIs and Sort Results

Analyzing JSON APIs and sorting the results using Python is a common task in data processing, web scraping, and automation. I’ll break it down into simple steps 
with clear explanations.

Step 1: Understanding JSON and APIs

JSON (JavaScript Object Notation) is a lightweight data format used for exchanging data between a server and a client.

APIs (Application Programming Interfaces) allow you to fetch data from a server using HTTP requests (GET, POST, etc.).

Most APIs return JSON data, which looks like this:

{
    "users": [
        {"name": "Alice", "age": 25},
        {"name": "Bob", "age": 22},
        {"name": "Charlie", "age": 30}
    ]
}

Step 2: Install Required Libraries

Python has built-in support for handling JSON, but you’ll need the requests library to make API calls.

Install it using:

pip install requests

Step 3: Fetch Data from an API

Let’s say we’re working with a sample API that returns user data.

Example: Fetching JSON Data from an API

import requests
import json

# API URL (Example: a placeholder API)
API_URL = "https://jsonplaceholder.typicode.com/users"

# Fetch data from API
response = requests.get(API_URL)

# Check if request was successful (Status Code 200)
if response.status_code == 200:
    data = response.json()  # Convert JSON response to a Python dictionary
    print(json.dumps(data, indent=4))  # Pretty-print JSON
else:
    print(f"Failed to fetch data. Status code: {response.status_code}")


Explanation:

- requests.get(API_URL): Sends an HTTP GET request to fetch data.

- .json(): Converts the response to a Python dictionary.

- json.dumps(data, indent=4): Pretty-prints JSON data for readability.

Step 4: Extract and Sort the JSON Data

Once we get the JSON data, we need to extract relevant fields and sort the results.

Example: Sorting Users by Name

# Extract user names and sort alphabetically
users = sorted(data, key=lambda user: user["name"])

# Print sorted results
for user in users:
    print(user["name"])

Explanation:

- sorted(data, key=lambda user: user["name"]): Sorts users alphabetically by their name field.

- The lambda function extracts the "name" key for sorting.

Example: Sorting Users by ID in Descending Order

users_sorted_by_id = sorted(data, key=lambda user: user["id"], reverse=True)

for user in users_sorted_by_id:
    print(user["id"], user["name"])

Explanation:

- reverse=True sorts the list in descending order.

Step 5: Filtering the Data

Sometimes, we only need specific results based on a condition.

Example: Filtering Users Based on a Condition

# Find users who live in a city named "Lebsackbury"
filtered_users = [user for user in data if user["address"]["city"] == "Lebsackbury"]

# Print filtered users
for user in filtered_users:
    print(user["name"], "-", user["address"]["city"])

 
Explanation:

- [user for user in data if user["address"]["city"] == "Lebsackbury"]: Filters users by checking the "city" field.

Step 6: Handling Errors Gracefully

APIs sometimes fail, so handling errors properly is important.

try:
    response = requests.get(API_URL, timeout=10)  # Timeout after 10 seconds
    response.raise_for_status()  # Raises HTTPError for bad responses (4xx, 5xx)
    data = response.json()
    print("Data fetched successfully!")
except requests.exceptions.Timeout:
    print("Request timed out!")
except requests.exceptions.HTTPError as err:
    print(f"HTTP error occurred: {err}")
except requests.exceptions.RequestException as err:
    print(f"An error occurred: {err}")

Explanation:

- timeout=10: Prevents hanging requests by setting a timeout.

- raise_for_status(): Checks for HTTP errors.

- except requests.exceptions.Timeout: Catches timeout errors.

- except requests.exceptions.RequestException: Catches any other request-related errors.

Step 7: Saving Sorted Data to a File

Once sorted, you might want to save the results for later use.

Example: Save Sorted Data to a JSON File

with open("sorted_users.json", "w") as file:
    json.dump(users, file, indent=4)
print("Data saved to sorted_users.json")

Explanation:

json.dump(users, file, indent=4): Saves sorted data in a readable JSON format.

Full Example Script

Here’s a complete script that:

1. Fetches data from an API

2. Sorts users by name

3. Filters users based on a condition

4. Handles errors

5. Saves sorted data to a file

import requests
import json

API_URL = "https://jsonplaceholder.typicode.com/users"

try:
    response = requests.get(API_URL, timeout=10)
    response.raise_for_status()
    data = response.json()

    # Sort users alphabetically by name
    sorted_users = sorted(data, key=lambda user: user["name"])

    # Filter users who live in a specific city
    city_name = "Lebsackbury"
    filtered_users = [user for user in sorted_users if user["address"]["city"] == city_name]

    # Save sorted users to a file
    with open("sorted_users.json", "w") as file:
        json.dump(sorted_users, file, indent=4)

    print("Data successfully fetched, sorted, and saved!")

except requests.exceptions.Timeout:
    print("Request timed out!")
except requests.exceptions.HTTPError as err:
    print(f"HTTP error occurred: {err}")
except requests.exceptions.RequestException as err:
    print(f"An error occurred: {err}")

Summary
✅ Step 1: Understand JSON and APIs
✅ Step 2: Install requests library
✅ Step 3: Fetch JSON data from an API
✅ Step 4: Extract and sort the data
✅ Step 5: Filter results based on conditions
✅ Step 6: Handle errors properly
✅ Step 7: Save sorted data to a file

This script gives you a solid foundation for working with APIs in Python. You can modify it to analyze and sort different types of API data based on your needs.
