Duck Typing and EAFP are two important concepts in Python that relate to the language's flexibility and error-handling approach.

Duck Typing:

At its core, Duck Typing is a programming concept that focuses on the behavior of objects rather than their specific types or 
classes. In Python, this means that you can use an object based on what it can do (its methods and attributes) rather than what
it is (its data type or class). The term "Duck Typing" comes from the saying, "If it looks like a duck, swims like a duck, and
quacks like a duck, then it probably is a duck."

Here's a more detailed explanation:

In statically-typed languages (like C++ or Java), you declare the data type of a variable, and that variable can only hold values
of that specific type. In contrast, Python uses dynamic typing, which means the type of a variable is determined at runtime. Duck
Typing takes this flexibility to another level by saying, "If an object behaves like a certain type, we can treat it as that type."

For example, you might have two classes, Duck and Dog, both of which have a method called speak(). In Duck Typing, if an object has
a speak() method, you can call it without caring if it's a Duck or a Dog:

def make_animal_speak(animal):
    animal.speak()

# You can pass a Duck or a Dog to the function, and it will work as long as they have a 'speak' method.
duck = Duck()
dog = Dog()

make_animal_speak(duck)
make_animal_speak(dog)

Duck Typing promotes code reusability and flexibility, as long as objects adhere to a common interface or behavior.

EAFP (Easier to Ask for Forgiveness than Permission):

EAFP is a programming philosophy in Python that encourages a specific approach to handling exceptions (errors) in 
your code. Instead of checking if something is allowed or possible before doing it, you try to do it, and if it 
fails, you catch and handle the exception.

In simpler terms:

EAFP means you write code assuming things will work and handle problems if they occur, rather than checking for
problems in advance. This approach often results in more concise and readable code because you focus on the main
logic rather than cluttering it with numerous checks.

Here's an example:

Suppose you want to open a file and read its contents. The EAFP way is to try opening the file and handle the
exception if it doesn't exist or other errors occur:

try:
    with open('file.txt', 'r') as file:
        content = file.read()
except FileNotFoundError:
    print("The file doesn't exist.")
except IOError:
    print("An I/O error occurred.")
else:
    print("File contents:", content)

With EAFP, you assume the file exists and can be read, and you deal with any problems (like it not existing
or I/O errors) if they happen. This approach can make your code cleaner and more Pythonic.

In summary, Duck Typing is about focusing on an object's behavior, while EAFP is about dealing with errors
by trying something and handling exceptions if they occur, rather than preemptively checking for problems.
Both concepts contribute to Python's flexibility and readability.
