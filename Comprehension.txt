Comprehension is a concise way to create lists, sets, dictionaries, and other iterable objects. It allows us to generate these data structures using a compact
and readable syntax. Comprehensions are often preferred over traditional loops because they make code more concise and expressive. In this explanation, we will 
cover list comprehensions, set comprehensions, and dictionary comprehensions with examples for each.

List Comprehensions:
A list comprehension is used to create a new list by applying an expression to each item in an existing iterable (e.g., a list) and optionally filtering the items
based on a condition.

Syntax:
[expression for item in iterable if condition]

Example 1: Creating a list of squares for numbers 0 to 9.

squares = [x**2 for x in range(10)]
# Output: [0, 1, 4, 9, 16, 25, 36, 49, 64, 81]

Example 2: Filtering even numbers from a list.

numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
evens = [x for x in numbers if x % 2 == 0]
# Output: [2, 4, 6, 8, 10]

Set Comprehensions:
A set comprehension is similar to a list comprehension, but it creates a new set instead of a list. Sets are unordered collections of unique elements.

Syntax:
{expression for item in iterable if condition}

Example: Creating a set of unique characters from a string.

text = "hello world"
unique_chars = {char for char in text}
# Output: {'o', 'r', 'e', 'l', 'h', 'w', 'd', ' '}

Dictionary Comprehensions:
A dictionary comprehension allows you to create a new dictionary by specifying key-value pairs derived from an iterable. You can also apply conditions to 
filter items.

Syntax:
{key_expression: value_expression for item in iterable if condition}

Example 1: Creating a dictionary with squares as values.

numbers = [1, 2, 3, 4, 5]
square_dict = {x: x**2 for x in numbers}
# Output: {1: 1, 2: 4, 3: 9, 4: 16, 5: 25}

Example 2: Filtering items in a dictionary.

data = {'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5}
filtered_dict = {key: value for key, value in data.items() if value % 2 == 0}
# Output: {'b': 2, 'd': 4}

In all these comprehensions, you can use any expression to transform the items from the iterable into the desired form, and you can include an optional
condition to filter the items that get included in the resulting data structure. Comprehensions are a powerful and concise way to work with iterables in
Python, making your code more readable and efficient.
