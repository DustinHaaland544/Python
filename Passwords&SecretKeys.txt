Hiding passwords and secret keys in environment variables is a common and secure way to manage sensitive information when working with databases or other services 
in your Python applications. 

Below, I'll explain how to set and use environment variables on Mac, Linux, and Windows.

Setting Environment Variables
On Mac and Linux
Temporary Environment Variables (for the current session only):

You can set environment variables in the terminal for the current session:

export DB_PASSWORD='your_secret_password'
export DB_USERNAME='your_db_username'

These variables will be available until you close the terminal session.

Permanent Environment Variables:

To set environment variables permanently, you can add them to your shell profile file (e.g., .bashrc, .bash_profile, .zshrc, etc.). Add the following lines to 
your profile file:

export DB_PASSWORD='your_secret_password'
export DB_USERNAME='your_db_username'

After adding these lines, you need to source the file to apply the changes:

source ~/.bashrc  # or ~/.bash_profile or ~/.zshrc

On Windows

1. Temporary Environment Variables (for the current session only):

You can set environment variables in the Command Prompt for the current session:

set DB_PASSWORD=your_secret_password
set DB_USERNAME=your_db_username

In PowerShell:

$env:DB_PASSWORD="your_secret_password"
$env:DB_USERNAME="your_db_username"

2. Permanent Environment Variables:

To set environment variables permanently, you can use the System Properties:

- Open the System Properties (Right-click on This PC or My Computer and select Properties).

- Click on Advanced system settings.

- Click on the Environment Variables button.

- In the System Variables section, click New and add your variable name and value (e.g., DB_PASSWORD and your_secret_password).

Using Environment Variables in Python

Once the environment variables are set, you can access them in your Python code using the os module:

import os

db_username = os.getenv('DB_USERNAME')
db_password = os.getenv('DB_PASSWORD')

# Example of using the variables to connect to a database
import psycopg2

try:
    connection = psycopg2.connect(
        database="your_database_name",
        user=db_username,
        password=db_password,
        host="your_database_host",
        port="your_database_port"
    )
    cursor = connection.cursor()
    cursor.execute("SELECT version();")
    db_version = cursor.fetchone()
    print(f"Connected to the database: {db_version}")
except Exception as error:
    print(f"Error connecting to the database: {error}")
finally:
    if connection:
        cursor.close()
        connection.close()
        print("Database connection closed.")

Best Practices

1. Use a .env File (with python-dotenv):

For convenience, you can store environment variables in a .env file and load them using the python-dotenv package:

- Install python-dotenv:

pip install python-dotenv

- Create a .env file in your project directory:

DB_USERNAME=your_db_username
DB_PASSWORD=your_secret_password

- Load the environment variables in your Python script:

from dotenv import load_dotenv
import os

load_dotenv()  # Load environment variables from .env file

db_username = os.getenv('DB_USERNAME')
db_password = os.getenv('DB_PASSWORD')

# Use the variables as needed

2. Avoid Committing Sensitive Information:

Ensure that your .env file or any files containing sensitive information are not committed to version control by adding them to your .gitignore file:

# .gitignore
.env

3. Use Environment Variables for All Sensitive Information:

Always use environment variables to manage all kinds of sensitive information such as API keys, secret keys, and database credentials to avoid hardcoding them in 
your source code.

By following these practices, you can securely manage sensitive information in your Python applications while working with databases or other services.
