1. Setting Up Python for Emailing

Python has a built-in library called smtplib for sending emails and another module called email for creating email messages.

pip install email-validator

Basic Modules You Need

smtplib: For connecting to the email server.

email.mime: To create different types of email content.

2. Sending a Plain Text Email

Code Example:

import smtplib
from email.mime.text import MIMEText

def send_plain_text_email(subject, body, to_email):
    from_email = "youremail@example.com"
    password = "yourpassword"
    smtp_server = "smtp.gmail.com"
    smtp_port = 587
    
    # Create the email
    msg = MIMEText(body, "plain")
    msg['Subject'] = subject
    msg['From'] = from_email
    msg['To'] = to_email
    
    # Send the email
    with smtplib.SMTP(smtp_server, smtp_port) as server:
        server.starttls()  # Secure the connection
        server.login(from_email, password)
        server.send_message(msg)

# Usage
send_plain_text_email("Test Email", "This is a plain text email.", "recipient@example.com")

3. Sending an HTML Email

Code Example:

from email.mime.text import MIMEText

def send_html_email(subject, html_content, to_email):
    from_email = "youremail@example.com"
    password = "yourpassword"
    
    # Create the email with HTML content
    msg = MIMEText(html_content, "html")
    msg['Subject'] = subject
    msg['From'] = from_email
    msg['To'] = to_email
    
    # Send the email (same as before)
    with smtplib.SMTP("smtp.gmail.com", 587) as server:
        server.starttls()
        server.login(from_email, password)
        server.send_message(msg)

# Usage
html_content = "<h1>This is an HTML Email</h1><p>Sent from Python!</p>"
send_html_email("HTML Email Test", html_content, "recipient@example.com")

4. Sending an Email with Attachments

Code Example:

from email.mime.text import MIMEText
from email.mime.multipart import MIMEMultipart
from email.mime.base import MIMEBase
from email import encoders

def send_email_with_attachment(subject, body, to_email, file_path):
    from_email = "youremail@example.com"
    password = "yourpassword"
    
    # Create a multipart message
    msg = MIMEMultipart()
    msg['Subject'] = subject
    msg['From'] = from_email
    msg['To'] = to_email
    
    # Add body text
    msg.attach(MIMEText(body, "plain"))
    
    # Attach the file
    with open(file_path, "rb") as attachment:
        part = MIMEBase("application", "octet-stream")
        part.set_payload(attachment.read())
        
    encoders.encode_base64(part)
    part.add_header("Content-Disposition", f"attachment; filename={file_path}")
    msg.attach(part)
    
    # Send the email
    with smtplib.SMTP("smtp.gmail.com", 587) as server:
        server.starttls()
        server.login(from_email, password)
        server.send_message(msg)

# Usage
send_email_with_attachment("Email with Attachment", "Please find the file attached.", "recipient@example.com", "path/to/your/file.txt")

5. Handling SMTP Authentication Errors Securely

Using hard-coded credentials isn’t recommended. Here are better alternatives:

i) Environment Variables:

import os
from_email = os.getenv("EMAIL")
password = os.getenv("EMAIL_PASSWORD")

ii) Using .env Files with dotenv:

pip install python-dotenv

Create a .env file:

EMAIL=youremail@example.com

EMAIL_PASSWORD=yourpassword

Load it in your script:

from dotenv import load_dotenv
import os

load_dotenv()

from_email = os.getenv("EMAIL")

password = os.getenv("EMAIL_PASSWORD")

6. Sending Emails Using Gmail’s SMTP

SMTP Server: smtp.gmail.com

Port: 587 (for TLS) or 465 (for SSL)

Gmail may block “less secure apps.” You can:

Use an App Password.

Enable Access for Less Secure Apps (not recommended).

7. Complete Example: HTML Email with Attachment

import os
import smtplib
from email.mime.multipart import MIMEMultipart
from email.mime.text import MIMEText
from email.mime.base import MIMEBase
from email import encoders

def send_complete_email(subject, html_content, to_email, attachment_path=None):
    from_email = os.getenv("EMAIL")
    password = os.getenv("EMAIL_PASSWORD")
    
    # Create the email
    msg = MIMEMultipart()
    msg['Subject'] = subject
    msg['From'] = from_email
    msg['To'] = to_email
    
    # Attach HTML content
    msg.attach(MIMEText(html_content, "html"))
    
    # Attach file if provided
    if attachment_path:
        with open(attachment_path, "rb") as attachment:
            part = MIMEBase("application", "octet-stream")
            part.set_payload(attachment.read())
            encoders.encode_base64(part)
            part.add_header("Content-Disposition", f"attachment; filename={os.path.basename(attachment_path)}")
            msg.attach(part)
    
    # Send the email
    with smtplib.SMTP("smtp.gmail.com", 587) as server:
        server.starttls()
        server.login(from_email, password)
        server.send_message(msg)

# Usage
send_complete_email(
    subject="Complete Email Test",
    html_content="<h1>Hello!</h1><p>This email has an attachment.</p>",
    to_email="recipient@example.com",
    attachment_path="path/to/attachment.pdf"
)

8. Debugging and Tips

Enable Debugging: Add server.set_debuglevel(1) to see the SMTP communication.

Handle Exceptions: Use try-except to catch and log errors.

Validate Emails: Use email-validator to check if email addresses are valid.
