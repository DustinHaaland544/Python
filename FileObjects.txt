File objects in Python are used to interact with files on your computer's filesystem. They allow you to perform various operations on files, 
such as opening, reading, writing, and closing them. Let's dive into the details of using file objects in Python.

Opening a File:
To open a file in Python, you can use the built-in open() function. The open() function takes two arguments: the file path (relative or absolute)
and the mode in which you want to open the file.

There are several modes you can use when opening a file:

'r': Read (default mode). Opens the file for reading.
'w': Write. Opens the file for writing. Creates a new file or truncates an existing file to zero length.
'a': Append. Opens the file for writing. Creates a new file if it doesn't exist or appends to an existing file.
'x': Exclusive creation. Opens the file for writing but fails if the file already exists.
'b': Binary mode. Used in combination with other modes (e.g., 'rb', 'wb') to work with binary files.
't': Text mode (default). Used in combination with other modes (e.g., 'rt', 'wt') to work with text files.
Here's an example of opening a file in read mode:

# Open a file in read mode
file = open('example.txt', 'r')

Closing a File:
It's essential to close a file after you've finished working with it. You can use the close() method of the file object to do this:

file.close()

Failing to close a file can lead to resource leaks and may prevent other programs from accessing the file.

Reading a File:
You can read the contents of a file using various methods provided by the file object:

read(): Reads the entire content of the file as a string.

file = open('example.txt', 'r')
content = file.read()
file.close()

file = open('example.txt', 'r')
content = file.read()
file.close()

readline(): Reads one line from the file.

file = open('example.txt', 'r')
line = file.readline()
file.close()

readlines(): Reads all lines in the file into a list.

file = open('example.txt', 'r')
lines = file.readlines()
file.close()

Writing to a File:
To write data to a file, you need to open it in write or append mode ('w' or 'a'). You can use the write() method to add content to the file:

# Open a file in write mode
file = open('output.txt', 'w')
file.write('Hello, World!\n')
file.close()

Looping Through Contents in a File:
You can iterate through the lines of a file using a for loop. This is a common way to process each line in a file:

file = open('example.txt', 'r')
for line in file:
    print(line.strip())  # strip() removes trailing newline characters
file.close()

Using with Statement (Recommended):
A more Pythonic and safe way to work with files is by using the with statement. It automatically closes the file when you're done with it, even if 
an error occurs:

with open('example.txt', 'r') as file:
    content = file.read()
    # Perform operations on the file

# File is automatically closed when the 'with' block exits

Remember to handle exceptions, such as FileNotFoundError and PermissionError, when working with files to ensure your code is robust in various situations.

Here, we've covered the basics of working with file objects in Python. You can perform more advanced operations, such as writing CSV or JSON data, by using 
appropriate libraries like csv and json.
