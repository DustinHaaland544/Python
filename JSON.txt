The json module in Python provides a simple way to work with JSON data. JSON (JavaScript Object Notation) is a lightweight data interchange format that's easy for humans to read and write, 
and easy for machines to parse and generate.

Hereâ€™s how you can use the json module in Python to work with JSON data:

1. Import the JSON module:

import json

2. Parsing JSON (Converting JSON to Python objects):

- From a JSON string:

json_string = '{"name": "John", "age": 30, "city": "New York"}'
python_dict = json.loads(json_string)
print(python_dict)
# Output: {'name': 'John', 'age': 30, 'city': 'New York'}

- From a JSON file:

with open('data.json', 'r') as file:
    python_dict = json.load(file)
print(python_dict)

3. Generating JSON (Converting Python objects to JSON):

- To a JSON string:

python_dict = {"name": "John", "age": 30, "city": "New York"}
json_string = json.dumps(python_dict)
print(json_string)
# Output: {"name": "John", "age": 30, "city": "New York"}

- To a JSON file:

python_dict = {"name": "John", "age": 30, "city": "New York"}
with open('data.json', 'w') as file:
    json.dump(python_dict, file)

Detailed Examples:

Parsing JSON (json.loads and json.load):

1. Parsing JSON string using json.loads:

import json

json_string = '{"name": "Alice", "age": 25, "city": "Wonderland"}'
python_obj = json.loads(json_string)
print(python_obj)
# Output: {'name': 'Alice', 'age': 25, 'city': 'Wonderland'}

# Accessing individual values
print(python_obj['name'])  # Output: Alice
print(python_obj['age'])   # Output: 25

2. Parsing JSON file using json.load:

import json

# Assume data.json contains: {"name": "Alice", "age": 25, "city": "Wonderland"}
with open('data.json', 'r') as file:
    python_obj = json.load(file)
print(python_obj)
# Output: {'name': 'Alice', 'age': 25, 'city': 'Wonderland'}

# Accessing individual values
print(python_obj['city'])  # Output: Wonderland

Generating JSON (json.dumps and json.dump):

1. Generating JSON string using json.dumps:

import json

python_obj = {"name": "Bob", "age": 22, "city": "Builderland"}
json_string = json.dumps(python_obj)
print(json_string)
# Output: {"name": "Bob", "age": 22, "city": "Builderland"}

# Pretty-printing the JSON string
json_string_pretty = json.dumps(python_obj, indent=4)
print(json_string_pretty)
# Output:
# {
#     "name": "Bob",
#     "age": 22,
#     "city": "Builderland"
# }

2. Generating JSON file using json.dump:

import json

python_obj = {"name": "Bob", "age": 22, "city": "Builderland"}
with open('output.json', 'w') as file:
    json.dump(python_obj, file)

# Optionally, pretty-printing to the file
with open('output_pretty.json', 'w') as file:
    json.dump(python_obj, file, indent=4)

Additional Options:

- Sorting the keys in the JSON output:

python_obj = {"name": "Bob", "age": 22, "city": "Builderland"}
json_string_sorted = json.dumps(python_obj, sort_keys=True)
print(json_string_sorted)
# Output: {"age": 22, "city": "Builderland", "name": "Bob"}

- Handling non-standard data types:
When you have data types that are not directly serializable to JSON (e.g., dates, custom objects), you can provide custom serialization logic:

import json
from datetime import datetime

def custom_serializer(obj):
    if isinstance(obj, datetime):
        return obj.isoformat()
    raise TypeError(f"Type {type(obj)} not serializable")

data = {"event": "Party", "date": datetime.now()}
json_string = json.dumps(data, default=custom_serializer)
print(json_string)
# Output: {"event": "Party", "date": "2024-05-18T12:34:56.789123"}

Using these examples, you can handle most common scenarios involving JSON data in Python. The json module is versatile and simplifies the process of working with JSON, allowing for easy 
serialization and deserialization of Python objects.
