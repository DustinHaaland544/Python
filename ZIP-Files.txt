Here's a detailed, simplified, and complete overview of working with ZIP files in Python. We'll cover both automated (via libraries/modules) and manual methods of creating and extracting zip archives.

What is a ZIP File?

A ZIP file is a compressed archive that can contain one or more files/folders. It's useful for reducing file size and grouping files together.

Modules & Libraries for ZIP in Python
Python has a built-in module called zipfile that handles ZIP operations. There's also a popular third-party library called shutil for higher-level operations.

We'll go over:

zipfile (built-in)

shutil (built-in, for making archives)

Manual (low-level) approach (for understanding how ZIP structure works)

1. Creating ZIP Files (Compression)

- A. Using zipfile module

import zipfile

# Create a zip file and add files
with zipfile.ZipFile('archive.zip', 'w') as zipf:
    zipf.write('file1.txt')
    zipf.write('file2.txt')

‚úÖ 'w' = write mode (creates new zip)
‚úÖ write() = adds file to zip

üîπ Add files with custom folder names inside ZIP:

zipf.write('file1.txt', arcname='folder_in_zip/file1.txt')

üîπ Add folders recursively:

import os

def zip_folder(folder_path, output_zip):
    with zipfile.ZipFile(output_zip, 'w') as zipf:
        for root, dirs, files in os.walk(folder_path):
            for file in files:
                file_path = os.path.join(root, file)
                arcname = os.path.relpath(file_path, folder_path)
                zipf.write(file_path, arcname)

zip_folder('my_folder', 'my_folder.zip')

üîπ B. Using shutil.make_archive()

This is easier but less customizable.

import shutil

# Create a zip archive of the folder

shutil.make_archive('backup', 'zip', 'my_folder')

import shutil

- This creates backup.zip containing everything inside my_folder.

2. Extracting ZIP Files (Decompression)

üîπ A. Using zipfile module

import zipfile

# Extract all files from a zip
with zipfile.ZipFile('archive.zip', 'r') as zipf:
    zipf.extractall('output_folder')  # extracts to this folder

üîπ List contents of a zip file:

with zipfile.ZipFile('archive.zip', 'r') as zipf:
    print(zipf.namelist())

üîπ Extract specific file:

with zipfile.ZipFile('archive.zip', 'r') as zipf:
    zipf.extract('file1.txt', 'output_folder')

3. üîê Password-Protected ZIP Files
Note: zipfile only supports reading password-protected zips, not creating.

Extracting password-protected zip:

with zipfile.ZipFile('secure.zip') as zipf:
    zipf.extractall(pwd=b'mypassword')  # password must be bytes

To create password-protected zips, you‚Äôd need external tools or libraries like pyminizip.

4. üîß Manual Method (Low-Level Approach ‚Äì for Learning)

You can use external tools with Python (like system calls):

import os

# Use OS system to zip manually (Linux/Mac only; not portable)
os.system("zip archive.zip file1.txt file2.txt")

But this is not recommended for cross-platform Python code.

5. Bonus: Using Pathlib for Cleaner Code:

from pathlib import Path
import zipfile

folder = Path('my_folder')
with zipfile.ZipFile('output.zip', 'w') as zipf:
    for file in folder.rglob('*'):
        if file.is_file():
            zipf.write(file, file.relative_to(folder))

Summary Table:
Task	                                          Method	                          Recommended For
Create zip (basic)	                            zipfile	                          Full control
Create zip (quick)	                            shutil	                          Simple folder zipping
Extract zip	                                    zipfile	                          General extraction
List zip contents	                              zipfile	                          Preview inside archive
Password zip (read)	                            zipfile	                          Reading protected zips
Password zip (write)	                          pyminizip	                        External library needed
Manual OS commands	                            os.system()	                      Not cross-platform
