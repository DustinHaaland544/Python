Slicing Lists and Strings

In Python, you can use indexing to access portions of a list. List indexing allows you to retrieve specific elements from a list by their position 
or index in the list. Python uses a zero-based indexing system, which means that the first element of the list has an index of 0, the second element
has an index of 1, and so on.

Here's how you can use indexing to get portions of a list:

Accessing a Single Element:
To access a single element in a list, you can use square brackets [] with the index of the element you want to retrieve.

my_list = [10, 20, 30, 40, 50]
element = my_list[2]  # Retrieves the element at index 2 (which is 30)
print(element)  # Output: 30

Accessing Multiple Elements (Slicing):
You can use slicing to retrieve a portion of a list. Slicing is done using a colon : inside the square brackets and specifies a range of indices.

my_list = [10, 20, 30, 40, 50]
sub_list = my_list[1:4]  # Retrieves elements at indices 1, 2, and 3
print(sub_list)  # Output: [20, 30, 40]

In this example, my_list[1:4] retrieves elements from index 1 up to (but not including) index 4.

Omitting Start or End in Slicing:
You can omit the start or end index in a slice to slice from the beginning or to the end of the list, respectively.

my_list = [10, 20, 30, 40, 50]
slice_start = my_list[:3]  # Retrieves elements from the start up to index 3 (exclusive)
slice_end = my_list[2:]    # Retrieves elements from index 2 to the end
print(slice_start)  # Output: [10, 20, 30]
print(slice_end)    # Output: [30, 40, 50]

Negative Indexing:
You can also use negative indices to count from the end of the list. -1 represents the last element, -2 represents 
the second-to-last element, and so on.

my_list = [10, 20, 30, 40, 50]
last_element = my_list[-1]  # Retrieves the last element (50)
second_last_element = my_list[-2]  # Retrieves the second-to-last element (40)

Stride (Step) in Slicing:
You can specify a step value in slicing to retrieve elements at regular intervals.

my_list = [10, 20, 30, 40, 50]
every_other_element = my_list[::2]  # Retrieves every second element
print(every_other_element)  # Output: [10, 30, 50]

These are some common techniques for using indexing to get portions of a list in Python. Indexing is a powerful feature
that allows you to manipulate and work with lists efficiently.


We can use negative values for stepping (also known as a stride) in slicing. Using a negative stride allows you to reverse
a list or extract elements in reverse order. Here are some examples to illustrate how negative stepping works:

Reverse a List:
To reverse a list, you can use a negative stride of -1. This will return a new list with the elements in reverse order.

my_list = [10, 20, 30, 40, 50]
reversed_list = my_list[::-1]  # Reverse the list
print(reversed_list)  # Output: [50, 40, 30, 20, 10]

Extract Elements in Reverse Order:
You can use a negative stride to extract elements from a list in reverse order. Here's an example:

my_list = [10, 20, 30, 40, 50]
reversed_slice = my_list[4::-1]  # Extract elements in reverse order starting from index 4
print(reversed_slice)  # Output: [50, 40, 30, 20, 10]

In this example, 4 is the starting index, and -1 is the stride, which means it goes in reverse order.

Extract Every Other Element in Reverse Order:
You can combine a negative stride with a start index to extract every other element in reverse order.

my_list = [10, 20, 30, 40, 50]
every_other_reverse = my_list[4::-2]  # Extract every other element in reverse order starting from index 4
print(every_other_reverse)  # Output: [50, 30, 10]

Here, 4 is the starting index, and -2 is the stride, which means it goes in reverse order, skipping every 
second element.

Negative stepping in slicing is a powerful tool when you need to work with lists in reverse or extract elements
in a non-conventional order. You can adjust the negative stride value to achieve the desired results for your 
specific use case.

We can use slicing in Python to extract portions of strings in the same way you do with lists. Here are the 
same examples using strings:

Accessing a Single Character:
To access a single character in a string, you can use square brackets [] with the index of the character you
want to retrieve.

my_string = "Hello, World!"
character = my_string[7]  # Retrieves the character at index 7 (which is 'W')
print(character)  # Output: 'W'

Accessing Substrings (Slicing):
You can use slicing to retrieve a portion of a string. Slicing is done using a colon ':' inside the square brackets
and specifies a range of indices.

my_string = "Hello, World!"
substring = my_string[0:5]  # Retrieves characters from index 0 to 4
print(substring)  # Output: 'Hello'

Omitting Start or End in Slicing:
You can omit the start or end index in a slice to slice from the beginning or to the end of the string, respectively.

my_string = "Hello, World!"
slice_start = my_string[:5]  # Retrieves characters from the start to index 4
slice_end = my_string[7:]    # Retrieves characters from index 7 to the end
print(slice_start)  # Output: 'Hello'
print(slice_end)    # Output: 'World!'

Negative Indexing:
You can also use negative indices to count from the end of the string.

my_string = "Hello, World!"
last_char = my_string[-1]  # Retrieves the last character ('!')
second_last_char = my_string[-2]  # Retrieves the second-to-last character ('d')

Stride (Step) in Slicing:
You can specify a step value in slicing to retrieve characters at regular intervals.

my_string = "Hello, World!"
every_other_char = my_string[::2]  # Retrieves every second character
print(every_other_char)  # Output: 'Hlo ol!'

Reverse a String:
To reverse a string, you can use a negative stride of -1.

my_string = "Hello, World!"
reversed_string = my_string[::-1]  # Reverse the string
print(reversed_string)  # Output: '!dlroW ,olleH'

Extract Substring in Reverse Order:
You can use a negative stride to extract a substring from a string in reverse order.

my_string = "Hello, World!"
reversed_substring = my_string[12:5:-1]  # Extract substring in reverse order from index 12 to 6
print(reversed_substring)  # Output: 'W ,ol'


my_list = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9] 

#          0, 1, 2, 3, 4, 5, 6, 7, 8, 9

#          -10, -9, -8, -7, -6, -5, -4, -3, -2, -1

# list[start:end:step] 

print(my_list)  # Output: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9] 

print(my_list[0])  # Output: 0

print(my_list[5])  # Output: 5

print(my_list(-1))   # Output: 9

print(my_list[-10])  # Output: 0

print(my_list[0:5])  # Output: [0, 1, 2, 3, 4]

print(my_list[0:6])  # Output: [0, 1, 2, 3, 4, 5, 6] 

print(my_list[3:8])  # Output: [3, 4, 5, 6, 7] 

print(my_list[-7:-2])  # Output: [3, 4, 5, 6, 7] 

print(my_list[1:-2])  # Output: [1, 2, 3, 4, 5, 6, 7] 

print(my_list[1:9])  # Output: [1, 2, 3, 4, 5, 6, 7, 8] 

print(my_list[1:])  # Output: [1, 2, 3, 4, 5, 6, 7, 8, 9]

print(my_list[5:])  # Output: [5, 6, 7, 8, 9] 

print(my_list[:-1])  # Output: [0, 1, 2, 3, 4, 5, 6, 7, 8] 

print(my_list[:])  # Output: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9] 

print(my_list[2:-1])  # Output: [2, 3, 4, 5, 6, 7, 8]

print(my_list(2:-1:2])  # Output: [2, 4, 6, 8] 

print(my_list[2:-1:1])  # Output: [2, 3, 4, 5, 6, 7, 8] 

print(my_list[2:-1:-1])  # Output: []

print(my_list[-1:2:-1])  # Output: [9, 8, 7, 6, 5, 4, 3] 

print(my_list[-2:1:-1])  # Output: [8, 7, 6, 5, 4, 3, 2] 

print(my_list[-2:1-2])  # Output: [8, 6, 4, 2]

print(my_list[::-1])  # Output: [9, 8, 7, 6, 5, 4, 3, 2, 1, 0]


Slicing Strings

sample_url = "https://www.google.com"

print(sample_url)  # Output: https://www.google.com

# Reverse the url

print(sample_url[::-1])  # Output: moc.elgoog.www//sptth

# Get the top-level domain

print(sample_url[-4:])  # Output: .com

# Print the url without the "https://"

print(sample_url[8:])  # Output: www.google.com

# Print the url without the "https://" or the top-level domain

print(sample_url[12:-4])  # Output: google
