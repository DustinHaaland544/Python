What is a Virtual Environment?

A virtual environment is a self-contained directory that contains a Python installation and its associated libraries. It allows you to:

1. Isolate dependencies for different projects.

2. Avoid conflicts between package versions.

3. Ensure your project runs consistently across environments.

How to Use venv to Manage Virtual Environments

Step 1: Prerequisites

1. Ensure Python (3.3 or newer) is installed.

2. Check if venv is available by running:

python3 -m venv --help

Step 2: Create a Virtual Environment

1. Open a terminal or command prompt.

2. Navigate to your project directory:

cd /path/to/your/project

3. Create a virtual environment:

python3 -m venv venv

- Replace python3 with python if using Windows.

- The last venv is the name of the environment folder. You can choose any name, but venv is a common convention.

Step 3: Activate the Virtual Environment

- On Windows:

venv\Scripts\activate

- On macOS/Linux:

source venv/bin/activate

- Youâ€™ll notice the terminal prompt changes to indicate the environment is active (e.g., (venv)).

Step 4: Install Packages in the Virtual Environment

- Use pip to install packages:

pip install <package_name>

- Example:

pip install flask

- To list installed packages:

pip list

Step 5: Freeze Dependencies (Optional but Recommended)

- Save a list of installed packages to a file:

pip freeze > requirements.txt

- This allows others (or future you) to recreate the environment easily.

Step 6: Deactivate the Virtual Environment

- When done, deactivate the environment:

deactivate

- The terminal prompt will return to normal. 

Step 7: Recreate an Environment (Using requirements.txt)

1. Share the requirements.txt file.

2. Create a new virtual environment:

python3 -m venv venv

3. Activate the environment and install packages:

source venv/bin/activate    # macOS/Linux
venv\Scripts\activate       # Windows
pip install -r requirements.txt

Good Practices

1. Use .gitignore: Exclude the venv folder when using version control (e.g., Git). Add this line to .gitignore:

venv/

2. Avoid Global pip Installs: Always install packages in the virtual environment to avoid global conflicts.

3. Use Descriptive Names: If managing multiple projects, name the virtual environment folder after the project (e.g., myproject_env).

Common Troubleshooting

1. Command Not Found (Windows):

- Ensure you are in the correct directory.

- Use python instead of python3.

2. Permission Issues (macOS/Linux):

- Run chmod +x on activation scripts if needed.

- Ensure Python and venv are installed correctly.

3. Virtual Environment Not Activating:

- On macOS/Linux, check shell settings (e.g., bash vs. zsh).

- Ensure the venv directory exists.
