Sorting in Python is a fundamental operation that allows you to arrange elements in a specific order. Python provides various ways to sort data structures like
lists, dictionaries, tuples, sets, and objects.

Sorting Lists:
Using the sorted() Function:
The sorted() function returns a new sorted list from the elements of any iterable (including lists).

my_list = [3, 1, 4, 1, 5, 9, 2, 6, 5, 3, 5]
sorted_list = sorted(my_list)
print(sorted_list)  # Output: [1, 1, 2, 3, 3, 4, 5, 5, 5, 6, 9]

Using the list.sort() Method:
The list.sort() method sorts the list in-place and does not return a new list.

my_list = [3, 1, 4, 1, 5, 9, 2, 6, 5, 3, 5]
my_list.sort()
print(my_list)  # Output: [1, 1, 2, 3, 3, 4, 5, 5, 5, 6, 9]

You can also use the reverse parameter to sort in descending order:

my_list.sort(reverse=True)  # Sort in descending order
print(my_list) # Output: [9, 6, 5, 5, 5, 4, 3, 3, 2, 1, 1]

Sorting Dictionaries:
Dictionaries are inherently unordered in Python, but you can sort them based on their keys or values.

Sorting by Keys:
You can use the sorted() function to sort a dictionary by its keys:

my_dict = {'b': 3, 'a': 1, 'c': 2}
sorted_dict = dict(sorted(my_dict.items()))
print(sorted_dict)  # Output: {'a': 1, 'b': 3, 'c': 2}

Sorting by Values:
You can sort a dictionary by its values using a lambda function as the key parameter in the sorted() function:

my_dict = {'b': 3, 'a': 1, 'c': 2}
sorted_dict = dict(sorted(my_dict.items(), key=lambda item: item[1]))
print(sorted_dict)  # Output: {'a': 1, 'c': 2, 'b': 3}

Sorting Tuples:
Tuples are similar to lists but are immutable, so you need to create a new sorted tuple.

my_tuple = (3, 1, 4, 1, 5, 9, 2, 6, 5, 3, 5)
sorted_tuple = tuple(sorted(my_tuple))
print(sorted_tuple) # Output: (1, 1, 2, 3, 3, 4, 5, 5, 5, 6, 9)

Sorting Sets:
Sets are unordered collections in Python, but you can convert them to a list, sort the list, and then convert it back to a set.

my_set = {3, 1, 4, 1, 5, 9, 2, 6, 5, 3, 5}
sorted_set = set(sorted(my_set))
print(sorted_set)  # Output: {1, 2, 3, 4, 5, 6, 9}

Sorting Objects in OOP:
To sort objects of custom classes, you need to define how objects should be compared. You can do this by implementing the __lt__ (less than) special method in 
your class. This method defines the comparison logic.

Here's an example of sorting objects of a custom Person class based on their age:

class Person:
    def __init__(self, name, age):
        self.name = name
        self.age = age

    def __lt__(self, other):
        # Compare based on age
        return self.age < other.age

people = [Person("Alice", 30), Person("Bob", 25), Person("Charlie", 35)]
sorted_people = sorted(people)
for person in sorted_people:
    print(person.name, person.age)

# Output:
# Bob 25
# Alice 30
# Charlie 35

This code defines the custom comparison logic for the Person objects, allowing them to be sorted by age using the sorted() function.

In summary, Python provides versatile ways to sort various data structures, including lists, dictionaries, tuples, sets, and objects in object-oriented programming models. 
You can use the built-in functions and methods for most cases and customize the sorting logic for objects by implementing the __lt__ method.
