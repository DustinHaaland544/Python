Lecture-109: Python Regular Expressions Part One


Regular Expressions Part One

1. We already know we can search for substrings within a larger string with the "in" operator:

	* "dog" in "my dog is great"

	- True

2. This has severe limitations, we need to know the exact string, and need to perform additional operations to account for capitalization and punctuation. 

3. What if we only the pattern structure of the string we are looking for? 

   Like an email or phone number?

4. Regular Expressions (regex) allow us to search for general patterns in text data!

5. For example, a simple email format can be:

	- user@email.com

6. We know in this case we are looking for a pattern "text" + "@" + "text" + ".com"

7. The "re" library allows us to create specialized pattern strings and then search for matches within text. 

8. The primary skill set for regex is understanding the special syntax for these pattern strings. 

9. Don't feel like you need to memorize these patterns! Focus on understanding how to look up the information. 

10. Phone Number

	- (555)-555-5555

11. Regex Pattern 

	- r"(\d\d\d) - \d\d\d - \d\d\d\d"

	- r"(\d{3}) - \d{3} - \d{4}"

12. This series of lectures we will first focus on how to use the "re" library to search for patterns within text. 

13. Afterwards, we will focus on understanding the regex syntax codes. 


Jupyter Notebook

In[1]: text = "The agent's phone number is 408-555-1234. Call soon!"

In[2]: 'phone' in text

Out[2]: True

In[3]: import re

In[4]: pattern = 'phone'

In[5]: re.search(pattern, text)

Out[5]: <_sre.SRE_Match object; span = (12, 17), match = 'phone'>

In[6]: pattern = 'NOT IN TEXT'

In[7]: re.search(pattern, text)

In[8]: pattern = 'phone'

In[9]: match = re.search(pattern, text)

In[10]: match

Out[10]: <_sre.SRE_Match object; span = (12, 17), match = 'phone'>

In[11]: match.span()

Out[11]: (12, 17)

In[12]: match.start()

Out[12]: 12

In[13]: match.end()

Out[13]: 17

In[14]: text = 'my phone once, my phone twice'

In[15]: match = re.search('phone', text)

In[16]: match

Out[16]: <sre.SRE_Match object; span = (3, 8), match = 'phone'>

In[17]: matches = re.findall('phone', text)

In[18]: matches

Out[18]: ['phone', 'phone']

In[19]: len(matches)

Out[19]: 2

In[20]: for match in re.finditer('phone', text)

		print(match)

Out[20]: <sre.SRE_Match object; span = (3, 8), match = 'phone'>

         <sre.SRE_Match object; span = (18, 23), match = 'phone'>

In[21]: for match in re.finderiter('phone', text):

		print(match.span())

Out[21]: (3, 8)

         (18, 23)

In[22]: for match in re.finder('phone', text):

		print(match, group())

Out[22]: phone

         phone