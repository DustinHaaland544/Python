10 Tips and Tricks for writing better code

condition = True

if condition:

  x = 1

else:

  x = 0

print (x)  // 1

condition = False 

if condition:

  x = 1

else:

  x = 0

print (x)  // 0


Short-cut of writing this code:

condition = False 

x = 1 if condition else 0

print(x)  // 0 

condition = True

x = 1 if condition else 0

print(x)  // 1


num1 = 10000000000

num2 = 100000000

total = num1 + num2

print(total)  // 10100000000

Easy ways of writing this code:

num1 = 10_000_000_000

num2 = 100_000_000

total = num1 + num2 

print(total)  // 10100000000

num1 = 10_000_000_000

num2 = 100_000_000

total = num1 + num2 

print(f'{total:,}')  // 10,100,000,000

f = open('test.txt', 'r')

file_contents = f.read()

f.close()

words = file_contents.split(' ')

word_count = len(words)

print(word_count)  // 

Short-cut way of writing this code:

with open('test.txt', 'r') as f:  # Using Context Manager 
  file_contents = f.read()

words = file_contents.split(' ')

word_count = len(words)

print(word_count)  // 

names = ['Corey', 'Chris', 'Dave', 'Travis'] 

index = 0
for name in names:
  print(name)
  index = index + 1

// Output:
// 0 Corey
// 1 Chris 
// 2 Dave
// 3 Travis

Easy way of writing this:

names = ['Corey', 'Chris', 'Dave', 'Travis'] 

for index, name in enumerate(names):
  print(index, name)

// Output:
// 0 Corey
// 1 Chris 
// 2 Dave
// 3 Travis

names = ['Corey', 'Chris', 'Dave', 'Travis'] 

for index, name in enumerate(names, start=1):
  print(index, name)

// Output:
// 1 Corey
// 2 Chris 
// 3 Dave
// 4 Travis

names = ['Peter Parker', 'Clark Kent', 'Wade Wilson', 'Bruce Wayne']

heroes = ['Spiderman', 'Superman', 'Deadpool', 'Batman']

for index, name in enumerate(names):
  hero = heroes[index] 
  print(f'{name} is actually {hero}')

// Output:
// Peter Parker is actually Spiderman
// Clark Kent is actually Superman
// Wade Wilson is actually Deadpool
// Bruce Wayne is actually Batman 

Short-cut ways of writing this code:

names = ['Peter Parker', 'Clark Kent', 'Wade Wilson', 'Bruce Wayne']

heroes = ['Spiderman', 'Superman', 'Deadpool', 'Batman']

for name, hero in zip(names, heroes):
  print(f'{name} is actually {hero}')

// Output:
// Peter Parker is actually Spiderman
// Clark Kent is actually Superman
// Wade Wilson is actually Deadpool
// Bruce Wayne is actually Batman

names = ['Peter Parker', 'Clark Kent', 'Wade Wilson', 'Bruce Wayne']

heroes = ['Spiderman', 'Superman', 'Deadpool', 'Batman']

universes = ['Marvel', 'DC', 'Marvel', 'DC']

for name, hero, universe in zip(names, heroes, universes):
  print(f'{name} is actually {hero} from {universe}')

// Output:
// Peter Parker is actually Spiderman from Marvel 
// Clark Kent is actually Superman from DC
// Wade Wilson is actually Deadpool from Marvel
// Bruce Wayne is actually Batman from DC

names = ['Peter Parker', 'Clark Kent', 'Wade Wilson', 'Bruce Wayne']

heroes = ['Spiderman', 'Superman', 'Deadpool', 'Batman']

universes = ['Marvel', 'DC', 'Marvel', 'DC']

for value in zip(names, heroes, universes):
  print(f'{name} is actually {hero} from {universe}')

// Output:
// ('Peter Parker', 'Spiderman', 'Marvel') 
// ('Clark Kent', 'Superman', 'DC')
// ('Wade Wilson', 'Deadpool', 'Marvel')
// ('Bruce Wayne', 'Batman', 'DC')

# Unpacking
# a, b = (1, 2)

print(a)
print(b)

// Output:
// 1
// 2

a, _ = (1, 2)  # Not using a variable

print(a)
# print(b)

// Output:
// 1

a, b, *c = (1, 2, 3, 4, 5) # Using asterisk (*) on c

print(a)
print(b)
print(c)

// Output:
// 1
// 2
// [3, 4, 5] 

a, b, *_ = (1, 2, 3, 4, 5) # Using asterisk (*) on c

print(a)
print(b)
# print(c)

// Output:
// 1
// 2

a, b, *c, d = (1, 2, 3, 4, 5) # Using asterisk (*) on c

print(a)
print(b)
print(c)
print(d)

// Output:
// 1
// 2
// [3, 4]
// 5

a, b, *c, d = (1, 2, 3, 4, 5, 6, 7) # Using asterisk (*) on c

print(a)
print(b)
print(c)
print(d)

// Output:
// 1
// 2
// [3, 4, 5, 6]
// 7

a, b, *_, d = (1, 2, 3, 4, 5, 6, 7) # Using asterisk (*) on c

print(a)
print(b)
# print(c)
print(d)

// Output:
// 1
// 2
// 7

class Person
  pass

person = Person()

person.first = "Corey"
person.last = "Schafer"

print(person.first)
print(person.last) 

# first_key = 'first'
# first_val = 'Corey'

# person_info = {'first': 'Corey', 'last': 'Schafer'}

// Output:
// Corey
// Schafer

class Person
  pass

person = Person()

first_key = 'first'
first_val = 'Corey'

setattr(person, 'first', 'Corey')

print(person.first)

// Output:
// Corey

class Person
  pass

person = Person()

first_key = 'first'
first_val = 'Corey'

setattr(person, first_key, first_val)

print(person.first)

// Output:
// Corey

class Person
  pass

person = Person()

first_key = 'first'
first_val = 'Corey'

first = getattr(person, first_key, first_val)

print(first)

// Output:
// Corey

class Person
  pass

person = Person()

person_info = {'first':'Corey', 'last': 'Schafer'}

for key, value in person_info.items():
  setattr(person, key, value)

print(person.first)
print(person.last)

// Output:
// Corey
// Schafer

class Person
  pass

person = Person()

person_info = {'first':'Corey', 'last': 'Schafer'}

for key, value in person_info.items():
  setattr(person, key, value)

for key in person_info.keys():
  print(getattr(person, key))

// Output:
// Corey
// Schafer
